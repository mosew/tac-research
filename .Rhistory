errors2[i,2]=predict(m2,newdata=data[i,])-y[i]
errors2[i,3]=predict(m3,newdata=data[i,])-y[i]
errors2[i,4]=predict(m4,newdata=data[i,])-y[i]
}
errors==errors2
m=data.frame(lm(y~x,data=data[-i,]),
lm(y~x+x.2,data=data[-i,]),
lm(y~x+x.2+x.3,data=data[-i,]),
lm(y~x+x.2+x.3+x.4,data=data[-i,]))
m=c(lm(y~x,data=data[-i,]),
lm(y~x+x.2,data=data[-i,]),
lm(y~x+x.2+x.3,data=data[-i,]),
lm(y~x+x.2+x.3+x.4,data=data[-i,]))
for(i in 1:length(x)){
m
m
m[,1]
str(m[1])
str(m[2])
set.seed(2)
for(i in 1:length(x)){
errors2[i,1]=predict(m1,newdata=data[i,])-y[i]
errors2[i,2]=predict(m2,newdata=data[i,])-y[i]
errors2[i,3]=predict(m3,newdata=data[i,])-y[i]
errors2[i,4]=predict(m4,newdata=data[i,])-y[i]
}
errors==errors2
data=data.frame(y,x,x^2,x^3,x^4)
set.seed(1)
errors=errors2=data.frame(m1=double(),
m2=double(),
m3=double(),
m4=double())
m1=lm(y~x,data=data[-i,])
m2=lm(y~x+x.2,data=data[-i,])
m3=lm(y~x+x.2+x.3,data=data[-i,])
m4=lm(y~x+x.2+x.3+x.4,data=data[-i,])
for(i in 1:length(x)){
errors[i,1]=predict(m1,newdata=data[i,])-y[i]
errors[i,2]=predict(m2,newdata=data[i,])-y[i]
errors[i,3]=predict(m3,newdata=data[i,])-y[i]
errors[i,4]=predict(m4,newdata=data[i,])-y[i]
}
#d)
set.seed(2)
for(i in 1:length(x)){
errors2[i,1]=predict(m1,newdata=data[i,])-y[i]
errors2[i,2]=predict(m2,newdata=data[i,])-y[i]
errors2[i,3]=predict(m3,newdata=data[i,])-y[i]
errors2[i,4]=predict(m4,newdata=data[i,])-y[i]
}
errors==errors2
names(errors)[abs(colSums(errors))==min(abs(colSums(errors)))]
str(m1)
m1$coefficients/sd(m1$coefficients)
t1=m1$coefficients/sd(m1$coefficients)
t2=m2$coefficients/sd(m2$coefficients)
t3=m3$coefficients/sd(m3$coefficients)
t4=m4$coefficients/sd(m4$coefficients)
t1
t2
t3
t4
summary(m1)
summary(m2)
summary(m3)
summary(m4)
source('C:/Users/mose/Dropbox/HW/math650/hw3.R')
source('C:/Users/mose/Dropbox/HW/math650/hw3.R')
.98*.98
library(caret)
getModelInfo(model="LogitBoost")
load("C:/Users/mose/Dropbox/HW/math650/votes/2000/.RData")
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
?tree
counts.results
x=seq(0,1,.01)
y=-x*log(x)
plot(x,y)
.1+.15+.2+.2+.55+.6+.6+.65+.7+.75
1/exp(1)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
str(Carseats)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
carseats.rtree
plot(carseats.rtree)
text(carseats.rtree,pretty=0)
text(carseats.rtree,pretty=1)
plot(carseats.rtree)
text(carseats.rtree,pretty=1)
plot(carseats.rtree)
text(carseats.rtree,pretty=0)
summary(carseats.rtree)
carseats.rtree=tree(Sales~.,data=Carseats,subset=train)
plot(carseats.rtree)
text(carseats.rtree,pretty=0)
summary(carseats.rtree)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
mean(yhat-Carseats$Sales[-train])
?cv.tree
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
cv.carseats.r
plot(cv.carseats.r$k,cv.carseats.r$dev,type="b")
cv.carseats.r
plot(cv.carseats.r$k,cv.carseats.r$dev)
plot(cv.carseats.r$k,cv.carseats.r$dev,type="b")
plot(cv.carseats.r$k,log(cv.carseats.r$dev),type="b")
plot(log(cv.carseats.r$k),log(cv.carseats.r$dev),type="b")
plot(log(cv.carseats.r$k),cv.carseats.r$dev,type="b")
plot(log(cv.carseats.r$k+1),cv.carseats.r$dev,type="b")
plot(log(cv.carseats.r$k-min(cv.carseats.r$k+1)),cv.carseats.r$dev,type="b")
plot(log(cv.carseats.r$k-min(cv.carseats.r$k)+1)),cv.carseats.r$dev,type="b")
plot(log(cv.carseats.r$k-min(cv.carseats.r$k)+1),cv.carseats.r$dev,type="b")
plot(cv.carseats$k,cv.carseats.r$dev,type="b")
plot(cv.carseats.r$k,cv.carseats.r$dev,type="b")
cv.carseats.r
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
prune.carseats.r = prune.tree(carseats.rtree, best=9)
prune.carseats.r
ncol(Carseats)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
importance(bag.carseats)
mean(predict(bag.carseats,newdata=Carseats[-train,])-Carseats$Sales[-train])
?randomForest
set.seed(334)
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=2:5,subset=train,importance=T)
rf.carseats
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=1:9,subset=train,importance=T)
rf.carseats
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=3,subset=train,importance=T)
rf.carseats
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=4,subset=train,importance=T)
rf.carseats
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=5,subset=train,importance=T)
rf.carseats
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=6,subset=train,importance=T)
rf.carseats
rf.carseats=randomForest(Sales~.,data=Carseats,mtry=7,subset=train,importance=T)
rf.carseats
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
mse
plot(1:9,mse)
importance(rf.carseats)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
mse
which(mse==min(mse))
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
importance(rf.carseats)
str(Hitters)
Hitters=Hitters[which(!is.na(Hitters),arr.ind=T)[1],]
Hitters
is.na(Hitters)
library(MASS)
library(ISLR)
h=Hitters[which(!is.na(Hitters),arr.ind=T)[1],]
h
is.na(Hitters)
Hitters
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
h=Hitters[!is.na(Hitters$Salary),]
h
h$Salary=log(h$Salary)
?gbm
library(gbm)
?gbm
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
set.seed(323)
mse.h=data.frame(rep(0,10))
for(i in 10^seq(-3,-2,.1)){
boost.h=gbm(Salary~.,data=h[training,],distribution="gaussian",
n.trees=1000,shrinkage=i)
mse.h[i]=mean((predict(boost.h,newdata=h$Salary[-training])-h$Salary[-training])^2)
}
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
boost.h=gbm(Salary~.,data=h[training,],distribution="gaussian",shrinkage=10^-3,
n.trees=1000)
boost.h=gbm(Salary~.,data=h[training,],distribution="gaussian",shrinkage=10^-3,
n.trees=1000)
boost.h
mse.h
10^seq(-3,-2,.1)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
boost.h
h$Salary[-training]
predict(boost.h,newdata=h$Salary[-training])
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
plot(mse.h)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
plot(mse.h)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
ggplot(aes(x=10^seq(-3,-1,.1),y=mse.h))
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
x=10^seq(-3,-1,.1)
y=mse.h
z=data.frame(x,y)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
ggplot(z)
ggplot(z,aes(x=x,y=y))
ggplot(z,aes(x=x,y=y))+geom_point()
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
ggplot(z,aes(x=x,y=y))+geom_point()
boost.h
plot(boost.h)
boost.h$train.error
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
ggplot(z,aes(x=x,y=y.train))+geom_point()
ggplot(z,aes(x=x,y=y.test))+geom_point()
lm.h=lm(Salary~.,data=h[training,])
lm.h
rf.h=randomForest(Salary~.,data=h[training,])
rf.h
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
min(y.test)
lm.test.mse.h
rf.test.mse.h
importance(boost.h)
summary(boost.h)
bag.h=randomForest(Salary~.,data=h[training,],mtry=7,ntree=25)
bag.h
mean((predict(bag.h,newdata=h[-training,])-h$Salary[-training])^2)
boost.c=gbm(Purchase~.,data=Caravan,n.trees=1000,shrinkage=.01,importance=T)
boost.c=gbm(Purchase~.,data=Caravan,n.trees=1000,shrinkage=.01)
boost.c=gbm(Purchase~.,data=Caravan,n.trees=1000,distribution="gaussian",shrinkage=.01)
importance(boost.c)
summary(boost.c)
pred.c=mean( predict(boost.c,newdata=Caravan[-training,])^2)
pred.c=mean( predict(boost.c,newdata=Caravan[-training,],n.trees=1000)^2)
pred.c
Purchase
Caravan$Purchase
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
boost.c=gbm(Purchase~.,data=Caravan,n.trees=1000,distribution="binomial",shrinkage=.01,verbose=F)
?gbm
as.numberic(Caravan$Purchase)
as.numeric(Caravan$Purchase)
boost.c=gbm(as.numeric(Purchase)-1~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=mean(predict(boost.c,newdata=Caravan[-training,],n.trees=1000)^2)
pred.c
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-(as.numeric(Caravan$Purchase[-training])-1)^2)
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c
boost.c
boost.c=gbm(as.numeric(Purchase)~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
boost.c=gbm(as.numeric(Purchase)-1~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c
boost.c$train.error
boost.c$fit
as.numeric(Caravan$Purchase)
set.seed(432)
boost.c=gbm(as.numeric(Purchase)-1~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c
(predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c
boost.c$fit
as.numeric(Caravan$Purchase)-1
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
boost.c=gbm((as.numeric(Purchase)-1)~.,data=Caravan[,-"Purchase"],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
boost.c=gbm((as.numeric(Purchase)-1)~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
boost.c$fit
boost.c=gbm((as.numeric(Purchase)-1)~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F,type="class")
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000,type="class")-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000,type="class")-1-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c=mean((predict(boost.c,newdata=Caravan[-training,],n.trees=1000)-1-(as.numeric(Caravan$Purchase[-training])-1))^2)
pred.c
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
pred.c
bernoulli
?gbm
boost.c=gbm(Purchase~.,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
Purchase
Caravan$Purchase
set.seed(432)
Caravan$p=as.numeric(Caravan$Purchase)-1
boost.c=gbm(p~.-Purchase,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
pred.c
dim(Caravan)
Caravan$p
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=100)
pred.c
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
boost.c$train.error
boost.c$trees
boost.c$shrinkage
boost.c=gbm(p~.-Purchase,data=Caravan,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=T)
Caravan$p
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
Caravan$p=as.numeric(Caravan$Purchase)-1
boost.c=gbm(p~.-Purchase,data=Caravan[training,],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
pred.c
training=1:1000
set.seed(432)
Caravan$p=as.numeric(Caravan$Purchase)-1
boost.c=gbm(p~.-Purchase,data=Caravan[training,],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
#              var     rel.inf
# PPERSAUT PPERSAUT 27.41563355
# PPLEZIER PPLEZIER 18.16202870
# PBRAND     PBRAND 11.43908652
# MKOOPKLA MKOOPKLA  3.40059293
# PBYSTAND PBYSTAND  3.28971326
# ALEVEN     ALEVEN  2.85726962
# MOPLLAAG MOPLLAAG  2.81745319
# MINKGEM   MINKGEM  2.78996414
# MOSTYPE   MOSTYPE  2.37631699
# ...
#c
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
pred.c
caravan.p
set.seed(432)
Caravan$p=as.numeric(Caravan$Purchase)-1
boost.c=gbm(p~.-Purchase,data=Caravan,subset=training,n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
boost.c=gbm(p~.-Purchase,data=Caravan[training,],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
Caravan$PVRAAUT
Caravan$p
boost.c=gbm(p~.-Purchase,data=Caravan[training,],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=predict(boost.c,newdata=Caravan[-training,],n.trees=1000)
pred.c
names(Caravan)
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
str(Caravan)
which(names(Caravan)=="Purchase")
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
set.seed(432)
Caravan$p=as.numeric(Caravan$Purchase)-1
boost.c=gbm(p~.-Purchase,data=Caravan[training,],n.trees=1000,distribution="bernoulli",shrinkage=.0001,verbose=F)
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
set.seed(432)
boost.c=gbm(p~.-Purchase,data=Caravan[training,],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
boost.c$valid.error
boost.c=gbm(p~.,data=Caravan[training,-86],n.trees=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
boost.c=gbm(p~.,data=Caravan[training,-86],n.tree=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
pred.c
Caravan.p
Caravan$p
set.seed(432)
Caravan$p=as.integer(Caravan$Purchase)-1 #To scale to 0-1.
boost.c=gbm(p~.,data=Caravan[training,-86],n.tree=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
summary(boost.c)
glm.c=glm(Purchase~.,data=Caravan[training,])
Purchase$p=NULL
glm.c=glm(Purchase~.,data=Caravan[training,])
Purchase$p=NULL
Caravan$p=NULL
glm.c=glm(Purchase~.,data=Caravan[training,])
set.seed(432)
Caravan$Purchase=as.integer(Caravan$Purchase)-1 #To scale to 0-1.
Caravan$Purchase
boost.c=gbm(Purchase~.,data=Caravan[training,],n.tree=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
summary(boost.c)
pred.c=predict(boost.c,newdata=Caravan[-training,-86],n.trees=1000)
pred.c
glm.c=glm(Purchase~.,data=Caravan[training,])
glm.c
glm.pred=predict(glm.c,newdata=Caravan[-training,])
glm.pred
glm.pred=predict(glm.c,newdata=Caravan[-training,])>0.2
glm.pred
glm.pred=predict(glm.c,newdata=Caravan[-training,])
table(glm.pred>0.2,Caravan$Purchase)
table(glm.pred>0.2,Caravan$Purchase[-training,])
glm.pred=predict(glm.c,newdata=Caravan[-training,])
table(glm.pred>0.2,Caravan$Purchase[-training,])
table(glm.pred>0.2,Caravan$Purchase[-training])
?as.boolean
set.seed(432)
Caravan$Purchase=Caravan$Purchase==2 #To scale to 0-1.
boost.c=gbm(Purchase~.,data=Caravan[training,],n.tree=1000,distribution="bernoulli",shrinkage=.01,verbose=F)
set.seed(432)
library(MASS)
Caravan
str(Cara)
str(Caravan)
library(ISLR)
str(Caravan)
source('C:/Users/mose/Dropbox/HW/math650/hw5.R')
str(Caravan)
mean(glm.pred>0.2==Caravan$Purchase[-training])
mean(as.numeric(glm.pred>0.2==Caravan$Purchase[-training]))
mean(as.numeric((glm.pred>0.2)==Caravan$Purchase[-training]))
install.packages(c("AID", "BH", "car", "caret", "chron", "coin", "colorspace", "Cubist", "curl", "data.table", "digest", "enpls", "ggplot2", "ggrepel", "git2r", "htmlwidgets", "jsonlite", "knitr", "lava", "leaps", "monomvn", "nycflights13", "openssl", "party", "plotly", "plotmo", "plotrix", "pls", "poweRlaw", "prodlim", "proto", "R6", "Rcpp", "reshape2", "rgl", "RSQLite", "scales", "scatterplot3d", "shiny", "SparseM", "TH.data", "tidyr", "tseries", "VGAM", "xgboost", "yaml", "zoo"))
load("C:/Users/mose/Dropbox/research/R/.RData")
df
A
names(A)
df
names(df)
arima0(A$TAC)
arima0(A$TAC,order=(3,0,3))
arima0(A$TAC,order=c(3,0,3))
arima0(A$TAC,order=c(3,0,2))
arima0(A$TAC,order=c(2,0,2))
arima0(A$TAC,order=c(3,1,3))
A$TAC
df
df$TAC
arima0(df$TAC,order=c(3,1,3))
arima0(df$TAC,order=c(2,1,2))
arima0(df$TAC,order=c(2,0,2))
arima0(df$TAC,order=c(8,0,8))
arima0(df$TAC,order=c(4,0,4))
arima0(df$TAC,order=c(4,0,3))
arima0(df$TAC,order=c(3,0,3))
arima0(df$TAC,order=c(3,0,2))
arima0(df$TAC,order=c(2,0,3))
arima0(df$TAC,order=c(2,0,1))
arima0(df$TAC,order=c(3,0,1))
arima0(df$TAC,order=c(4,0,1))
arima0(df$TAC,order=c(4,0,4))
arima0(df$TAC,order=c(4,0,2))
arima0(df$TAC,order=c(3,0,2))
arima0(df$TAC,order=c(2,0,2))
arima0(df$TAC,order=c(2,0,3))
arima0(df$TAC,order=c(2,0,1))
arima0(df$TAC,order=c(3,0,1))
arima0(df$TAC,order=c(4,0,1))
arima0(df$TAC,order=c(9,0,1))
arima0(df$TAC,order=c(20,0,1))
arima0(df$TAC,order=c(12,0,1))
arima0(df$TAC,order=c(5,0,1))
arima0(df$TAC,order=c(5,0,5))
arima0(df$TAC,order=c(5,0,3))
arima0(df$TAC,order=c(5,0,2))
arima0(df$TAC,order=c(5,0,1))
arima0(df$TAC,order=c(2,0,1))
arima0(scale(df$TAC),order=c(2,0,1))
arima0(scale(df$TAC),order=c(3,0,1))
arima0(scale(df$TAC),order=c(3,0,4))
arima0(scale(df$TAC),order=c(3,0,2))
arima0(scale(df$TAC),order=c(3,0,1))
arima0(scale(df$TAC),order=c(4,0,1))
arima0(scale(df$TAC),order=c(3,0,1))
arima(scale(df$TAC),order=c(3,0,1))
arima(df$TAC,xreg=df$BrAC,order=(3,0,1))
arima(df$TAC,xreg=df$BrAC,order=c(3,0,1))
arima(df$TAC,xreg=df$BrAC,order=c(4,0,1))
arima(df$TAC,xreg=df$BrAC,order=c(15,0,1))
arima(df$TAC,xreg=df$BrAC,order=c(5,0,1))
source('C:/Users/mose/Dropbox/research/R/test_data_analysis_tau5_linear.R')
d$AUC.errors
d$peak.time.errors
d$badscales
?mean
d$L2.errors
L2errors = mean(d$L2.errors[,1])
L2errors = mean(d$L2.errors[,1,,])
L2errors = mean(d$L2.errors[,1,])
L2errors = mean(d$L2.errors[,1, ,])
L2errors = mean(d$L2.errors[,1, ,,])
type(d$L2.errors)
head(d$L2.errors)
names(d$L2.errors)
what(d$L2.errors)
L2errors = d$L2.errors
L2errors
L2errors[1,1]
L2errors[[1,1]]
L2errors[1,]
L2errors[[1,]
L2errors[[1,]]
L2errors = data.frame(d$L2.errors)
L2errors
d$L2.errors
d$L2.errors[1]
d$L2.errors[2]
