# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *
# 

    
@function
def confidence_limits(fks=None,*args,**kwargs):
    varargin = confidence_limits.varargin
    nargin = confidence_limits.nargin

    # fks is a 1 x K array of function handles
    # where the k^th column represents the function handle corresponding to
    # the k^th run (the k^th amplitude draws) from the MCMC
    
    d=lambda t=None: cell2mat(cellfun(lambda c=None: feval(c,t),fks.T,'UniformOutput',false))
# pillonetto_bell/src/confidence_limits.m:6
    fL=lambda t=None: quantile(feval(d,t),0.025)
# pillonetto_bell/src/confidence_limits.m:8
    fU=lambda t=None: quantile(feval(d,t),0.975)
# pillonetto_bell/src/confidence_limits.m:9
    fM=lambda t=None: mean(feval(d,t))
# pillonetto_bell/src/confidence_limits.m:10
    lo_up_mid=cellarray([fL,fU,fM])
# pillonetto_bell/src/confidence_limits.m:11
    return lo_up_mid
    
if __name__ == '__main__':
    pass
    