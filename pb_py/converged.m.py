# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *
# 

    
@function
def converged(a=None,k=None,K=None,nEndingSteps=None,burnin=None,epsilon=None,*args,**kwargs):
    varargin = converged.varargin
    nargin = converged.nargin

    bool=(k >= K)
# pillonetto_bell/src/converged.m:5
    #     if nEndingSteps<=0
#         fprintf('nEndingSteps should be > 1')
#     end
#     
#     if size(a,2)==k-1+burnoff
#         bool = 1;
#         return
#     end
#     
#     
#     if k < burnoff+nEndingSteps
#         bool=0;
#     else
#         # This condition returns true only if the amplitude guesses changed
#         # by less than epsilon the previous nEndingSteps iterations
#     bool= all(all(abs(diff(a(:,(k-burnoff-nEndingSteps+1):k-burnoff),2))<epsilon));
#     end
#
    return bool
    
if __name__ == '__main__':
    pass
    