# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *
# 

    
@function
def dVy_th(theta=None,P=None,T=None,n=None,eivs=None,Lmatrix=None,*args,**kwargs):
    varargin = dVy_th.varargin
    nargin = dVy_th.nargin

    # OUTPUT:
    # 3D matrix
    # n x n x nTheta
    # 
    # dVy_th(i,k,r) =  ( dV(y|th)/dth_r )_ik
    
    eivs=evaluate_eivs(eivs,theta)
# pillonetto_bell/src/dVy_th.m:8
    nTheta=length(theta)
# pillonetto_bell/src/dVy_th.m:10
    deiv_=deiv(theta,P,T)
# pillonetto_bell/src/dVy_th.m:12
    dLmatrix_=dLmatrix(theta,P,n,Lmatrix)
# pillonetto_bell/src/dVy_th.m:14
    dVy_thu_=dVy_thu(theta,P,n)
# pillonetto_bell/src/dVy_th.m:15
    dVy_th=zeros(n,n,nTheta)
# pillonetto_bell/src/dVy_th.m:17
    for i in arange(1,n).reshape(-1):
        for k in arange(1,n).reshape(-1):
            for r in arange(1,nTheta).reshape(-1):
                dVy_th[i,k,r]=sum(multiply(multiply(deiv_[:,r],Lmatrix[:,i]),Lmatrix[:,k]) + multiply(eivs,(multiply(dLmatrix_[:,i,r],Lmatrix[:,k]) + multiply(Lmatrix[:,i],dLmatrix_[:,k,r]))))
# pillonetto_bell/src/dVy_th.m:22
    
    
    dVy_th=dVy_th + dVy_thu(theta,P,n)
# pillonetto_bell/src/dVy_th.m:27
    return dVy_th
    
if __name__ == '__main__':
    pass
    