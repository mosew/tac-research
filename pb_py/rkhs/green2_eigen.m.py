# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *
# 

    
@function
def green2_eigen(j=None,T=None,*args,**kwargs):
    varargin = green2_eigen.varargin
    nargin = green2_eigen.nargin

    # This is for the second-order Green kernel
    # See appendix of paper for k=2 numerical scheme
    a=alpha(j)
# pillonetto_bell/src/rkhs/green2_eigen.m:4
    c3=lambda c4=None: dot(c4,(2 / (1 + exp(dot(- 2,a))) - 1)) / sin(a)
# pillonetto_bell/src/rkhs/green2_eigen.m:5
    c2=lambda c4=None: c4 - dot(c3[c4],exp(- a))
# pillonetto_bell/src/rkhs/green2_eigen.m:6
    c1=lambda c4=None: - c4 - dot(c3[c4],exp(- a))
# pillonetto_bell/src/rkhs/green2_eigen.m:7
    c4=integral(lambda t=None: (dot(c1[1],cos(dot(a,t) / T)) + dot(c2[1],sin(dot(a,t) / T)) + dot(c3[1],exp(dot(- a,(T - t)) / T)) + exp(dot(- a,t) / T)) ** 2,0,T) ** (- 0.5)
# pillonetto_bell/src/rkhs/green2_eigen.m:8
    eif=lambda t=None: dot(c1[c4],cos(dot(a,t) / T)) + dot(c2[c4],sin(dot(a,t) / T)) + dot(c3[c4],exp(dot(- a,(T - t)) / T)) + dot(c4,exp(dot(- a,t) / T))
# pillonetto_bell/src/rkhs/green2_eigen.m:10
    eiv=lambda th=None: dot(th[1],(T / a) ** 4)
# pillonetto_bell/src/rkhs/green2_eigen.m:11
    return eiv,eif
    
if __name__ == '__main__':
    pass
    